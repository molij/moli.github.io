<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jQuery on 莫离君的博客</title>
    <link>https://gongvirgil.github.io/Blog/categories/jquery/</link>
    <description>Recent content in jQuery on 莫离君的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 08 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://gongvirgil.github.io/Blog/categories/jquery/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jQuery插件开发笔记</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2014-12-08-jquery-plugin/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2014-12-08-jquery-plugin/</guid>
      <description>jQuery插件的开发包括两种：&#xA;一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数。 另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。 类级别的插件开发 类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：&#xA;添加一个新的全局函数 添加一个全局函数，我们只需如下定义：&#xA;jQuery.foo = function() { alert(&#39;This is a test. This is only a test.&#39;); }; 增加多个全局函数 添加多个全局函数，可采用如下定义：&#xA;jQuery.foo = function() { alert(&#39;This is a test. This is only a test.&#39;); }; jQuery.bar = function(param) { alert(&#39;This function takes a parameter, which is &amp;quot;&#39; + param + &#39;&amp;quot;.&#39;); }; 调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(&#39;bar&#39;); 使用jQuery.extend(object);　jQuery.extend({ foo: function() { alert(&#39;This is a test. This is only a test.&#39;); }, bar: function(param) { alert(&#39;This function takes a parameter, which is &amp;quot;&#39; + param +&#39;&amp;quot;.</description>
    </item>
    <item>
      <title>jQuery插件模板</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2015-12-02-jquery-plugin-template/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2015-12-02-jquery-plugin-template/</guid>
      <description>此 jQuery 插件模板出自：jQuery Plugin Boilerplate, revisited&#xA;// jQuery Plugin Boilerplate // A boilerplate for jumpstarting jQuery plugins development // version 1.1, May 14th, 2011 // by Stefan Gabos // remember to change every instance of &amp;quot;pluginName&amp;quot; to the name of your plugin! (function($) { // here we go! $.pluginName = function(element, options) { // plugin&#39;s default options // this is private property and is accessible only from inside the plugin var defaults = { foo: &#39;bar&#39;, // if your plugin is event-driven, you may provide callback capabilities // for its events.</description>
    </item>
    <item>
      <title>常用的jQuery小技巧</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2015-10-21-jquery-little-method/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2015-10-21-jquery-little-method/</guid>
      <description>1. 如何创建嵌套的过滤器&#xA;//允许你减少集合中的匹配元素的过滤器， //只剩下那些与给定的选择器匹配的部分。在这种情况下， //查询删除了任何没（:not）有（:has） //包含class为“selected”（.selected）的子节点。 .filter(&amp;quot;:not(:has(.selected))&amp;quot;) 2. 如何重用元素搜索&#xA;var allItems = $(&amp;quot;div.item&amp;quot;); var keepList = $(&amp;quot;div#container1 div.item&amp;quot;); //现在你可以继续使用这些jQuery对象来工作了。例如， //基于复选框裁剪“keep list”，复选框的名称 //符合 &amp;lt;DIV&amp;gt;class names:x $(formToLookAt + &amp;quot; input:checked&amp;quot;).each(function() { keepList = keepList.filter(&amp;quot;.&amp;quot; + $(this).attr(&amp;quot;name&amp;quot;)); }); &amp;lt;/DIV&amp;gt; 3. 任何使用has()来检查某个元素是否包含某个类或是元素&#xA;//jQuery 1.4.*包含了对这一has方法的支持。该方法找出 //某个元素是否包含了其他另一个元素类或是其他任何的 //你正在查找并要在其之上进行操作的东东。 $(&amp;quot;input&amp;quot;).has(&amp;quot;.email&amp;quot;).addClass(&amp;quot;email_icon&amp;quot;); 4. 如何使用jQuery来切换样式表 //找出你希望切换的媒体类型（media-type），然后把href设置成新的样式表。 5. 如何限制选择范围（基于优化目的）&#xA;//尽可能使用标签名来作为类名的前缀， //这样jQuery就不需要花费更多的时间来搜索 //你想要的元素。还要记住的一点是， //针对于你的页面上的元素的操作越具体化， //就越能降低执行和搜索的时间。 var in_stock = $(&#39;#shopping_cart_items input.is_in_stock&#39;); &amp;lt;ul id=&amp;quot;shopping_cart_items&amp;quot;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;Item-X&amp;quot; name=&amp;quot;item&amp;quot; class=&amp;quot;is_in_stock&amp;quot; /&amp;gt;Item X&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;Item-Y&amp;quot; name=&amp;quot;item&amp;quot; class=&amp;quot;3-5_days&amp;quot; /&amp;gt;Item Y&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;Item-Z&amp;quot; name=&amp;quot;item&amp;quot; class=&amp;quot;unknown&amp;quot; /&amp;gt;Item Z&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 6.</description>
    </item>
    <item>
      <title>jQuery笔记</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2014-01-01-jquery/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/jquery/2014-01-01-jquery/</guid>
      <description></description>
    </item>
  </channel>
</rss>
