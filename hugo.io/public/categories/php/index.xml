<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on 莫离君的博客</title>
    <link>https://gongvirgil.github.io/Blog/categories/php/</link>
    <description>Recent content in php on 莫离君的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 17 Jul 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://gongvirgil.github.io/Blog/categories/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP代码之使用匿名函数</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-07-17-anonymous-function/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-07-17-anonymous-function/</guid>
      <description>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。&#xA;匿名函数目前是通过Closure类来实现的。&#xA;闭包函数也可以作为变量的值来使用。PHP 会自动把此种表达式转换成内置类Closure的对象实例。把一个closure对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号。&#xA;闭包可以从父作用域中继承变量。 任何此类变量都应该用use语言结构传递进去。 PHP 7.1起，不能传入此类变量：superglobals、 $this 或者和参数重名。 这些变量都必须在函数或类的头部声明。 从父作用域中继承变量与使用全局变量是不同的。全局变量存在于一个全局的范围，无论当前在执行的是哪个函数。而 闭包的父作用域是定义该闭包的函数（不一定是调用它的函数）。&#xA;构建函数或方法内部的代码块 假如我们有一段逻辑，在一个函数或者方法里我们需要格式化数据,但是这个格式化数据的代码片段出现了多次，如果我们直接写可能会想下面这样：&#xA;function doSomething(...) { ... // 格式化代码段 ... ... // 格式化代码段[重复的代码] ... } 我相信大多数的人应该不会像上面这么写，可能都会像下面这样：&#xA;function doSomething(...) { ... format(...); ... format(...); ... } // 再声明一个格式花代码的函数或方法 function format() { // 格式化代码段 ... } 上面这样的写法没有任何的问题，最小单元化我们的代码片段，但是如果这个format函数或者方法只是doSomething使用呢？我通常会向下面这么写，为什么？因为我认为在这种上下文的环境中format和doSomething的一个子集。&#xA;function doSomething() { ... $package = function (...) use (...) {　// 同样use后面的参数也可以传引用 // 格式化代码段 ... }; ... package(...); ... package(...); .</description>
    </item>
    <item>
      <title>PHP代码之使用引用</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-07-17-use-/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-07-17-use-/</guid>
      <description>在PHP 中引用的意思是：不同的名字访问同一个变量内容。php的引用（就是在变量或者函数、对象等前面加上&amp;amp;符号）最重要就是删除引用的变量，只是引用的变量访问不了，但是内容并没有销毁。&#xA;场景一：遍历一个数组获取新的数据结构 也许你会这样写：&#xA;// 申明一个新的数组,组装成你想要的数据 $tmp = []; foreach ($arr as $k =&amp;gt; $v) { // 取出你想要的数据 $tmp[$k][&#39;youwant&#39;] = $v[&#39;youwant&#39;]; ... // 一系列判断得到你想要的数据 if (...) { $tmp[$k][&#39;youwantbyjudge&#39;] = &#39;TIGERB&#39;; } ... } // 最后得要你想要的数组$tmp ------------------------------------------------------- // 也许你觉着上面的写法不是很好，那我们下面换种写法 foreach ($arr as $k =&amp;gt; $v) { // 一系列判断得到你想要的数据 if (...) { // 复写值为你想要的 $arr[$k][&#39;youwantbyjudge&#39;] = &#39;TIGERB&#39; } ... // 干掉你不想要的结构 unset($arr[$k][&#39;youwantdel&#39;]); } // 最后我们得到我们的目标数组$arr 接下来我们使用引用值：&#xA;foreach ($arr as ＆$v) { // 一系列判断得到你想要的数据 if (.</description>
    </item>
    <item>
      <title>PHP类的接口`interface`</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-07-17-interface/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-07-17-interface/</guid>
      <description>PHP类是单继承，也就是不支持多继承，当一个类需要多个类的功能时，继承就无能为力了，为此 PHP 引入了类的接口技术。&#xA;如果一个抽象类里面的所有方法都是抽象方法，且没有声明变量，而且接口里面所有的成员都是public权限的，那么这种特殊的抽象类就叫接口。&#xA;接口使用关键字interface来定义，并使用关键字implements来实现接口中的方法，且必须完全实现。&#xA;例子：&#xA;&amp;lt;?php //定义接口 interface User{ function getDiscount(); function getUserType(); } //VIP用户 接口实现 class VipUser implements User{ // VIP 用户折扣系数 private $discount = 0.8; function getDiscount() { return $this-&amp;gt;discount; } function getUserType() { return &amp;quot;VIP用户&amp;quot;; } } class Goods{ var $price = 100; var $vc; //定义 User 接口类型参数，这时并不知道是什么用户 function run(User $vc){ $this-&amp;gt;vc = $vc; $discount = $this-&amp;gt;vc-&amp;gt;getDiscount(); $usertype = $this-&amp;gt;vc-&amp;gt;getUserType(); echo $usertype.&amp;quot;商品价格：&amp;quot;.$this-&amp;gt;price*$discount; } } $display = new Goods(); $display -&amp;gt;run(new VipUser);&#x9;//可以是更多其他用户类型 ?</description>
    </item>
    <item>
      <title>Ubuntu上在多个PHP版本之间切换</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-06-13-switch-between-multiple-php-version-on-ubuntu/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-06-13-switch-between-multiple-php-version-on-ubuntu/</guid>
      <description>在您的系统上，如果您已安装了多个版本的PHP（例如PHP 7.1和PHP 5.6两者）。 PHP 7.1作为Apache和CLI的默认PHP运行。对于任何需求，您需要使用PHP 5.6。然后你不需要删除php 7.1。你可以简单地切换php版本为默认用于Apache和命令行。&#xA;例如，您的服务器安装了PHP 7.1和PHP 5.6两个版本。现在下面的例子将帮助你在两个版本之间切换。&#xA;从PHP 5.6 =&amp;gt; PHP 7.1 默认PHP 5.6在您的系统上设置，您需要切换到PHP 7.1。&#xA;Apache： – $ sudo a2dismod php5.6 $ sudo a2enmod php7.1 $ sudo service apache2 restart 命令行：- $ update-alternatives --set php /usr/bin/php7.1 从PHP 7.1 =&amp;gt; PHP 5.6 默认PHP 7.1在您的系统上设置，您需要切换到PHP 5.6。&#xA;Apache： – $ sudo a2dismod php7.1 $ sudo a2enmod php5.6 $ sudo service apache2 restart 命令行：- $ sudo update-alternatives --set php /usr/bin/php5.6 原文地址：如何在Ubuntu上在多个PHP版本之间切换</description>
    </item>
    <item>
      <title>递归时内存占用问题</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-04-01-php-recursion-memory-problem/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2017-04-01-php-recursion-memory-problem/</guid>
      <description>若有涉及到重复操作，尽量使用循环而非递归。 每一次递归调用都将过程在内存中复制一遍，如果有大数据的局部变量则会导致内存激增。 内存分配的图示：&#xA;&amp;lt;?php //递归10次内存测试 function test($j=0,$start){ $aa = str_repeat($j,2560000); echo (memory_get_usage()-$start).&amp;#34;\r\n&amp;#34;;//依次输出：2560424 5120704 7680920 10241136 12801352 15361568 17921784 20482000 23042216 25602432 //结论：递归自身之前需要unset局部变量释放内存，否则会一直占据内存直到递归结束 $j++; if($j&amp;lt;10) test($j,$start); } function test1($j=0,$start){ $queue = array(); array_push($queue, $j); while(count($queue)&amp;lt;10){ $aa = str_repeat($j,2560000); echo (memory_get_usage()-$start).&amp;#34;\r\n&amp;#34;;//依次输出：2560856 2561120 2561320 2561520 2561720 2561920 2562120 2562320 2562584 $j++; array_push($queue, $j); } } $start = memory_get_usage(); test(0,$start); ?&amp;gt; </description>
    </item>
    <item>
      <title>几种常见的PHP加密算法</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2016-03-04-php-encrypt-method/</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2016-03-04-php-encrypt-method/</guid>
      <description>##Discuz authcode&#xA;&amp;lt;?php /** * $string 明文或密文 * $operation 加密ENCODE或解密DECODE * $key 密钥 * $expiry 密钥有效期 */ function authcode($string, $operation = &#39;DECODE&#39;, $key = &#39;&#39;, $expiry = 0) { // 动态密匙长度，相同的明文会生成不同密文就是依靠动态密匙 // 加入随机密钥，可以令密文无任何规律，即便是原文和密钥完全相同，加密结果也会每次不同，增大破解难度。 // 取值越大，密文变动规律越大，密文变化 = 16 的 $ckey_length 次方 // 当此值为 0 时，则不产生随机密钥 $ckey_length = 4; // 密匙 // $GLOBALS[&#39;discuz_auth_key&#39;] 这里可以根据自己的需要修改 $key = md5($key ? $key : $GLOBALS[&#39;discuz_auth_key&#39;]); // 密匙a会参与加解密 $keya = md5(substr($key, 0, 16)); // 密匙b会用来做数据完整性验证 $keyb = md5(substr($key, 16, 16)); // 密匙c用于变化生成的密文 $keyc = $ckey_length ?</description>
    </item>
    <item>
      <title>【高并发简单解决方案】redis队列缓存 &#43; mysql 批量入库 &#43; php离线整合</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-25-redis&#43;mysql&#43;php-high-concurrence/</link>
      <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-25-redis&#43;mysql&#43;php-high-concurrence/</guid>
      <description>需求背景：有个调用统计日志存储和统计需求，要求存储到mysql中；存储数据高峰能达到日均千万，瓶颈在于直接入库并发太高，可能会把mysql干垮。&#xA;问题分析&#xA;思考：应用网站架构的衍化过程中，应用最新的框架和工具技术固然是最优选择；但是，如果能在现有的框架的基础上提出简单可依赖的解决方案，未尝不是一种提升自我的尝试。&#xA;解决：&#xA;问题一：要求日志最好入库；但是，直接入库mysql确实扛不住，批量入库没有问题，done。【批量入库和直接入库性能差异参考文章】 问题二：批量入库就需要有高并发的消息队列，决定采用redis list 仿真实现，而且方便回滚。 问题三：日志量毕竟大，保存最近30条足矣，决定用php写个离线统计和清理脚本。 done，下面是小拽的简单实现过程&#xA;##一：设计数据库表和存储&#xA;考虑到log系统对数据库的性能更多一些，稳定性和安全性没有那么高，存储引擎自然是只支持select insert 没有索引的archive。如果确实有update需求，也可以采用myISAM。 考虑到log是实时记录的所有数据，数量可能巨大，主键采用bigint，自增即可。 考虑到log系统以写为主，统计采用离线计算，字段均不要出现索引，因为一方面可能会影响插入数据效率，另外读时候会造成死锁，影响写数据。 ##二：redis存储数据形成消息队列&#xA;由于高并发，尽可能简单，直接，上代码。&#xA;&amp;lt;?php /*************************************************************************** * * 获取到的调用日志，存入redis的队列中. * $Id$ * **************************************************************************/ /** * @file saveLog.php * @date 2015/11/06 20:47:13 * @author:cuihuan * @version $Revision$ * @brief * **/ // 获取info $interface_info = $_GET[&#39;info&#39;]; // 存入redis队列 $redis = new Redis(); $redis-&amp;gt;connect(&#39;xx&#39;, 6379); $redis-&amp;gt;auth(&amp;quot;password&amp;quot;); // 加上时间戳存入队列 $now_time = date(&amp;quot;Y-m-d H:i:s&amp;quot;); $redis-&amp;gt;rPush(&amp;quot;call_log&amp;quot;, $interface_info . &amp;quot;%&amp;quot; . $now_time); $redis-&amp;gt;close(); /* vim: set ts=4 sw=4 sts=4 tw=100 */ ?</description>
    </item>
    <item>
      <title>PHP设置定时任务的实现方法</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-25-php-timing-task/</link>
      <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-25-php-timing-task/</guid>
      <description>定时运行任务对于一个网站来说，是一个比较重要的任务，比如定时发布文档，定时清理垃圾信息等，现在的网站大多数都是采用PHP动态语言开发的，而对于PHP的实现决定了它没有Java和.Net这种AppServer的概念，而http协议是一个无状态的协议，PHP只能被用户触发，被调用，调用后会自动退出内存，没有常驻内存。&#xA;如果非要PHP去设置定时任务， 可以有以下三个方法：&#xA;##1、用户触发定时&#xA;通过挂载到网页里面，判断当前的时间，然后运行PHP代码，缺点是每一次加载网页，都需要加载这个PHP页面，而对于人气不旺的网站，这样的延时可能会更加的严重，毕竟是用户的HTTP请求去触发这个PHP代码的运行，Discuz!论坛程序是判断在00:00之后，第一个用户访问请求去执行定时的PHP代码。&#xA;##2、常驻内存运行&#xA;PHP是可以常驻内存运行程序的，下面的这段代码，可以在当前文件夹下，生成一个test.txt，并每隔20秒，往里面写入一个时间戳，无论客户端是否关闭浏览器。&#xA;&amp;lt;?php ignore_user_abort(true); set_time_limit(0); function write_txt(){ if(!file_exists(&amp;quot;test.txt&amp;quot;)){ $fp = fopen(&amp;quot;test.txt&amp;quot;,&amp;quot;wb&amp;quot;); fclose($fp); } $str = file_get_contents(’test.txt’); $str .= &amp;quot;\r\n&amp;quot;.date(&amp;quot;H:i:s&amp;quot;); $fp = fopen(&amp;quot;test.txt&amp;quot;,&amp;quot;wb&amp;quot;); fwrite($fp,$str); fclose($fp); } function do_cron(){ usleep(20000000); write_txt(); } while(1){ do_cron(); } ?&amp;gt; ###关键的两个函数&#xA;ignore_user_abort(true)，这个函数的作用是，无论客户端是否关闭浏览器，下面的代码都将得到执行。&#xA;set_time_limit(0)，这个函数的作用是，取消PHP文件的执行时间，如果没有这个函数的话，默认PHP的执行时间是30秒，也就是说30秒后，这个文件就会从内存中删除。&#xA;另外usleep函数是在PHP5.0后的版本中加入的函数，支持Windows操作系统，设置代码运行的时间，单位是毫秒(MS)。&#xA;###如何停止定时&#xA;但是当我执行脚本的时候，即使我关闭了浏览器，我根本就没法去停止这段程序了，所以你需要一个执行脚本的开关，你可以用外部文件引入的方法来实现，在while循环的时候，include开关变量即可。那么就可以这样实现：&#xA;建立外部引入变量文件 switch.php 内容如下：&#xA;&amp;lt;?php return 1;//1执行脚本 0退出执行脚本 ?&amp;gt; 这个脚本只是测试可行，具体效率应该不高，对于lamp，你完全可以使用crontab 来实现。&#xA;##3、服务器定时任务&#xA;服务器定时任务需要你是独立的服务器，或者是VPS，总之就是对系统的配置有足够的权限，虚拟空间就不要折腾这个方法了，因为你没有权限。&#xA;###Windows平台&#xA;在 Windows 平台下您可以将cli\php.exe 和 .php 文件的双击属性相关联，您也可以编写一个批处理文件来用 PHP 执行脚本。我们把写好的程序放在一个目录下如 E:\web\mail.php 。&#xA;然后写一个windows批处理文件内容如下：&#xA;@D:\php\cli\php.exe E:\web\mail.</description>
    </item>
    <item>
      <title>根据ip查询所在地</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-25-ip-to-address/</link>
      <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-25-ip-to-address/</guid>
      <description>##获取IP地址&#xA;&amp;lt;?php function get_client_ip(){ if (isset($_SERVER)) { if (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) { $realip = $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]; } elseif (isset($_SERVER[&#39;HTTP_CLIENT_IP&#39;])) { $realip = $_SERVER[&#39;HTTP_CLIENT_IP&#39;]; } else { $realip = $_SERVER[&#39;REMOTE_ADDR&#39;]; } } else { if (getenv(&amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;)) { $realip = getenv( &amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;); } elseif (getenv(&amp;quot;HTTP_CLIENT_IP&amp;quot;)) { $realip = getenv(&amp;quot;HTTP_CLIENT_IP&amp;quot;); } else { $realip = getenv(&amp;quot;REMOTE_ADDR&amp;quot;); } } return $realip; } echo $ip = get_client_ip(); ?&amp;gt; ##根据ip查询所在地&#xA;###新浪接口&#xA;&amp;lt;?php $res0 = file_get_contents(&amp;quot;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;amp;ip=$ip&amp;quot;); $res0 = json_decode($res0,true); print_r($res0); echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;; ?</description>
    </item>
    <item>
      <title>php获取文件夹下所有文件，包含子文件夹</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-17-php-files-directory/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-17-php-files-directory/</guid>
      <description>/** * 获取文件夹下所有文件 * @param $directory 需要获取的文件夹 * @param bool $recursive 是否递归获取子文件夹 * @return array */ function directoryToArray($directory, $recursive = false) { $array_items = array(); if(!is_dir($directory)) return &amp;quot;$directory folder does not exist&amp;quot;; if ($handle = opendir($directory)) { while (false !== ($file = readdir($handle))) { if ($file != &amp;quot;.&amp;quot; &amp;amp;&amp;amp; $file != &amp;quot;..&amp;quot;) { if (is_dir($directory. &amp;quot;/&amp;quot; . $file)) { if($recursive) { $array_items = array_merge($array_items, directoryToArray($directory. &amp;quot;/&amp;quot; . $file, $recursive)); } $file = $directory .</description>
    </item>
    <item>
      <title>PHP调试执行时间</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-16-php-run-time/</link>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-16-php-run-time/</guid>
      <description>##获取一行或一段代码的执行时间&#xA;通常使用microtime函数获取代码前后的微秒时间数再比较两个值的时间差，但这种方法很有局限制，不能大范围的应用，而且每次都需要书写很多代码，适合于简单的调试。具体请查看PHP手册详细说明。代码如下：&#xA;&amp;lt;?php function microtime_float(){ list($usec, $sec) = explode(&amp;quot; &amp;quot;, microtime()); return ((float)$usec + (float)$sec); } $time_start = microtime_float(); usleep(100); $time_end = microtime_float(); $time = $time_end - $time_start; echo &amp;quot;Did nothing in $time seconds\n&amp;quot;; ?&amp;gt; ###microtime (PHP 3, PHP 4, PHP 5)&#xA;microtime &amp;ndash; 返回当前 Unix 时间戳和微秒数 说明 mixed microtime ( [bool get_as_float] )&#xA;microtime() 当前 Unix 时间戳以及微秒数。本函数仅在支持 gettimeofday() 系统调用的操作系统下可用。 如果调用时不带可选参数，本函数以 &amp;ldquo;msec sec&amp;rdquo; 的格式返回一个字符串，其中 sec 是自 Unix 纪元（0:00:00 January 1, 1970 GMT）起到现在的秒数，msec 是微秒部分。字符串的两部分都是以秒为单位返回的。</description>
    </item>
    <item>
      <title>收藏到桌面的快捷方式</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-15-shortcut-save-url/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-15-shortcut-save-url/</guid>
      <description>收藏到桌面的快捷方式，使用链接：_path_/shortcut.php?url=_url_&amp;amp;filename=_filename_&#xA;//shortcut.php &amp;lt;?php $url = $_GET[&#39;url&#39;]; $filename = $_GET[&#39;filename&#39;]; $ShortCut = &amp;quot; [DEFAULT] BASEURL=&amp;quot;.$url.&amp;quot; [InternetShortcut] URL=&amp;quot;.$url.&amp;quot; Modified=B07A55D9386FCA01CA IconFile=_url_/favicon.ico IconIndex=1 &amp;quot;; Header(&amp;quot;Content-type: application/octet-stream&amp;quot;); header(&amp;quot;Content-Disposition: attachment; filename=&amp;quot;.$filename.&amp;quot;.url;&amp;quot;); echo $ShortCut; </description>
    </item>
    <item>
      <title>测试phpexcel后报错Class &#39;ZipArchive&#39; not found解决方法</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-03-php-zip-so/</link>
      <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-03-php-zip-so/</guid>
      <description>今天想做一个从数据库导出订单生成excel,在本地运行测试就报错Class &#39;ZipArchive&#39; not found.&#xA;解决方法:&#xA;##在window系统下:&#xA;php.ini文件中，将extension=php_zip.dll前面的分号“;”去除,将 zlib.output_compression = Off 改为 zlib.output_compression = On,重启apache&#xA;##在linux系统下:&#xA;要重新下载编译php_zip.dll&#xA;cd /usr/src wget http://pecl.php.net/get/zip tar -zxvf zip cd zip-1.x.x phpize ./configure make sudo make install 安装后记录屏幕下的zip.so的位置,例如/usr/local/lib/php/extensions/zip.so&#xA;在php.ini里面,增加extension = /usr/local/lib/php/extensions/zip.so，然后，将 zlib.output_compression = Off 改为 zlib.output_compression = On&#xA;最后重启apache: service httpd restart</description>
    </item>
    <item>
      <title>Memcache基本教程</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-02-memcache/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-02-memcache/</guid>
      <description>Memcache是danga.com的一个项目，最早是为 LiveJournal 服务的，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力。 它可以应对任意多个连接，使用非阻塞的网络IO。由于它的工作机制是在内存中开辟一块空间，然后建立一个HashTable，Memcached自管理这些HashTable。 Memcache官方网站：http://www.danga.com/memcached，更多详细的信息可以来这里了解 :)&#xA;###为什么会有Memcache和memcached两种名称？ 其实Memcache是这个项目的名称，而memcached是它服务器端的主程序文件名，知道我的意思了把~~~~。一个是项目名称，一个是主程序文件名，在网上看到了很多人不明白，于是混用了。&#xA;##Memcache的安装 分为两个过程：memcache服务器端的安装和memcached客户端的安装。 所谓服务器端的安装就是在服务器（一般都是linux系统）上安装Memcache实现数据的存储 所谓客户端的安装就是指php（或者其他程序，Memcache还有其他不错的api接口提供）去使用服务器端的Memcache提供的函数，需要php添加扩展。&#xA;###具体的配置大家可以参考： Linux下的Memcache安装：http://www.ccvita.com/257.html Windows下的Memcache安装：http://www.ccvita.com/258.html Memcache基础教程：http://www.ccvita.com/259.html Discuz!的Memcache缓存实现：http://www.ccvita.com/261.html Memcache协议中文版：http://www.ccvita.com/306.html Memcache分布式部署方案：http://www.ccvita.com/395.html&#xA;##PHP的Memcache&#xA;&amp;lt; ?php //连接 $mem = new Memcache; $mem-&amp;gt;connect(&amp;quot;192.168.0.200&amp;quot;, 12000); //保存数据 $mem-&amp;gt;set(&#39;key1&#39;, &#39;This is first value&#39;, 0, 60); $val = $mem-&amp;gt;get(&#39;key1&#39;); echo &amp;quot;Get key1 value: &amp;quot; . $val .&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //替换数据 $mem-&amp;gt;replace(&#39;key1&#39;, &#39;This is replace value&#39;, 0, 60); $val = $mem-&amp;gt;get(&#39;key1&#39;); echo &amp;quot;Get key1 value: &amp;quot; . $val . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //保存数组 $arr = array(&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;, &#39;ddd&#39;); $mem-&amp;gt;set(&#39;key2&#39;, $arr, 0, 60); $val2 = $mem-&amp;gt;get(&#39;key2&#39;); echo &amp;quot;Get key2 value: &amp;quot;; print_r($val2); echo &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //删除数据 $mem-&amp;gt;delete(&#39;key1&#39;); $val = $mem-&amp;gt;get(&#39;key1&#39;); echo &amp;quot;Get key1 value: &amp;quot; .</description>
    </item>
    <item>
      <title>使用PHP&#43;Zend_Search_Lucene做全站中文搜索引擎</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-01-php-zend_search_lucene-cn-search/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-12-01-php-zend_search_lucene-cn-search/</guid>
      <description>1.概述 Zend_Search_Lucene是一个完全基于PHP5的通用文本搜索引擎，它将索引存储在文件系统中，不需要数据库服务器。&#xA;2. 安装Zend_Lucene 可以从这里下载: http://www.zend.com/community/downloads&#xA;也可以参考这篇文章：http://nonfu.me/p/4650.html 的下载目录去下载Zend Framework导入。&#xA;找到Zend文件夹下的Search目录，所需要的文件都在里面了。&#xA;3.创建索引 下面是创建索引的示例:&#xA;&amp;lt;?php require_once &#39;Zend/Search/Lucene.php&#39;; $articlesData = array( 0=&amp;gt;array(&#39;id&#39;=&amp;gt;1,&#39;title&#39;=&amp;gt;&#39;test&#39;,&#39;content&#39;=&amp;gt;&#39;this is a test&#39;), 1=&amp;gt;array(&#39;id&#39;=&amp;gt;2,&#39;title&#39;=&amp;gt;&#39;test php&#39;,&#39;content&#39;=&amp;gt;&#39;this is a php test&#39;), 2=&amp;gt;array(&#39;id&#39;=&amp;gt;3,&#39;title&#39;=&amp;gt;&#39;test yii&#39;,&#39;content&#39;=&amp;gt;&#39;this is a yii test&#39;), 3=&amp;gt;array(&#39;id&#39;=&amp;gt;4,&#39;title&#39;=&amp;gt;&#39;test lucene&#39;,&#39;content&#39;=&amp;gt;&#39;this is a lucene test&#39;), 4=&amp;gt;array(&#39;id&#39;=&amp;gt;5,&#39;title&#39;=&amp;gt;&#39;测试&#39;,&#39;content&#39;=&amp;gt;&#39;这是一个简单的搜索测试&#39;), 5=&amp;gt;array(&#39;id&#39;=&amp;gt;6,&#39;title&#39;=&amp;gt;&#39;测一个小试&#39;,&#39;content&#39;=&amp;gt;&#39;我们进行一个小测验吧&#39;), 6=&amp;gt;array(&#39;id&#39;=&amp;gt;6,&#39;title&#39;=&amp;gt;&#39;白色的马&#39;,&#39;content&#39;=&amp;gt;&#39;白色的小马驹&#39;) ); $index = new Zend_Search_Lucene(&#39;/path/to/index&#39;,true); $doc = new Zend_Search_Lucene_Document(); foreach ($articlesData as $article) { $doc-&amp;gt;addField(Zend_Search_Lucene_Field::keyword(&#39;id&#39;,$article[&#39;id&#39;],&#39;UTF-8&#39;)); $doc-&amp;gt;addField(Zend_Search_Lucene_Field::Text(&#39;title&#39;,$article[&#39;title&#39;],&#39;UTF-8&#39;)); $doc-&amp;gt;addField(Zend_Search_Lucene_Field::keyword(&#39;content&#39;,$article[&#39;content&#39;],&#39;UTF-8&#39;)); $index-&amp;gt;addDocument($doc); $index-&amp;gt;commit(); $index-&amp;gt;optimize(); } echo &#39;索引创建成功！&#39;; 在实际案例中，索引数据应该来自数据库，在上面的示例中，我们的所有索引数据都可以用数据库查询的结果来替代。&#xA;4.搜索索引数据 创建索引之后我们就可以通过下面的代码来搜索了:&#xA;$index = new Zend_Search_Lucene(&#39;/path/to/index&#39;); $keywords = &amp;quot;test&amp;quot;; //echo &amp;quot;Index包含{$index-&amp;gt;count()}条结果&amp;lt;br&amp;gt;&amp;quot;; $query = Zend_Search_Lucene_Search_QueryParser::parse($keywords,&#39;utf-8&#39;); $hits = $index-&amp;gt;find($query); foreach($hits as $hit){ echo $hit-&amp;gt;id.</description>
    </item>
    <item>
      <title>PHP 判断设备是否是手机/平板的方法</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-14-php-is-mobile/</link>
      <pubDate>Wed, 14 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-14-php-is-mobile/</guid>
      <description>在做WEB开发的时候经常会需要用到对移动设备的页面匹配，当然可以直接把网站做成响应式的，但如果不想这么做的话，可以使用PHP对设备类型进行判断，然后显示相应的界面和内容。今天分享一种使用 PHP 判断设备是否是手机/平板的方法，方法来源于WordPress(wp-includes/vars.php:125)，适用于大部分类型的手机/平板判断：&#xA;在做WEB开发的时候经常会需要用到对移动设备的页面匹配，当然可以直接把网站做成响应式的，但如果不想这么做的话，可以使用PHP对设备类型进行判断，然后显示相应的界面和内容。今天分享一种使用 PHP 判断设备是否是手机/平板的方法，方法来源于WordPress(wp-includes/vars.php:125)，适用于大部分类型的手机/平板判断：&#xA;/** * Test if the current browser runs on a mobile device (smart phone, tablet, etc.) * * @staticvar bool $is_mobile * * @return bool */ function wp_is_mobile() { static $is_mobile = null; if ( isset( $is_mobile ) ) { return $is_mobile; } if ( empty($_SERVER[&#39;HTTP_USER_AGENT&#39;]) ) { $is_mobile = false; } elseif ( strpos($_SERVER[&#39;HTTP_USER_AGENT&#39;], &#39;Mobile&#39;) !== false // many mobile devices (all iPhone, iPad, etc.</description>
    </item>
    <item>
      <title>PHP设计模式之简单工厂模式</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-10-simple-factory-mode/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-10-simple-factory-mode/</guid>
      <description>简单工厂模式：&#xA;①抽象基类：类中定义抽象一些方法，用以在子类中实现 ②继承自抽象基类的子类：实现基类中的抽象方法 ③工厂类：用以实例化对象 使用情景：在不确定会有多少个处理操作时应该考虑使用简单工厂模式，如针对同样的接收到的数据，处理的逻辑可能会不同，可能以后还会增加新的操作。&#xA;##采用封装方式&#xA;&amp;lt;?php class Calc{ /** * 计算结果 * * @param int|float $num1 * @param int|float $num2 * @param string $operator * @return int|float */ public function calculate($num1,$num2,$operator){ try { $result=0; switch ($operator){ case &#39;+&#39;: $result= $num1+$num2; break; case &#39;-&#39;: $result= $num1-$num2; break; case &#39;*&#39;: $result= $num1*$num2; break; case &#39;/&#39;: if ($num2==0) { throw new Exception(&amp;quot;除数不能为0&amp;quot;); } $result= $num1/$num2; break; } return $result; }catch (Exception $e){ echo &amp;quot;您输入有误:&amp;quot;.</description>
    </item>
    <item>
      <title>简单实用的PHP函数</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-10-php-simple-methods/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-10-php-simple-methods/</guid>
      <description>###对象到数组转换&#xA;function objToArr($obj){ if(!is_object($obj) &amp;amp;&amp;amp; !is_array($obj)) { return $obj; } $arr = array(); foreach($obj as $k =&amp;gt; $v){ $arr[$k] = $this-&amp;gt;objToArr($v); } return $arr; } ###json到php数组转换&#xA;function simple_json_parser($json){ $json = str_replace(&amp;quot;{&amp;quot;,&amp;quot;&amp;quot;,str_replace(&amp;quot;}&amp;quot;,&amp;quot;&amp;quot;, $json)); $jsonValue = explode(&amp;quot;,&amp;quot;, $json); $arr = array(); foreach($jsonValue as $v){ $jValue = explode(&amp;quot;:&amp;quot;, $v); $arr[str_replace(&#39;&amp;quot;&#39;,&amp;quot;&amp;quot;, $jValue[0])] = (str_replace(&#39;&amp;quot;&#39;, &amp;quot;&amp;quot;, $jValue[1])); } return $arr; } ###curl 实现 GET / POST&#xA;function oauth_http($method,$header,$url,$data){ $method = $method ? $method : &#39;get&#39;; if( $method == &#39;get&#39;) { $ch = curl_init (); curl_setopt($ch, CURLOPT_HTTPHEADER, $header); curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, TRUE ); curl_setopt ( $ch, CURLOPT_URL, $url ); $result = curl_exec ( $ch ); curl_close ( $ch ); return $result; } elseif ( $method == &#39;post&#39; ) { $ch = curl_init(); curl_setopt($ch, CURLOPT_HTTPHEADER, $header); curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, TRUE ); curl_setopt ( $ch, CURLOPT_POST, TRUE ); curl_setopt ( $ch, CURLOPT_POSTFIELDS, $data ); curl_setopt ( $ch, CURLOPT_URL, $url ); curl_setopt ( $ch, CURLOPT_SSL_VERIFYPEER, FALSE); $ret = curl_exec ( $ch ); curl_close ( $ch ); return $ret; } } ###获取链接内容(不存在file_get_contents() 时使用curl方法)</description>
    </item>
    <item>
      <title>PHP设计模式之单例模式</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-09-php-singleton-pattern/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-10-09-php-singleton-pattern/</guid>
      <description>单例模式（职责模式）：&#xA;简单的说，一个对象（在学习设计模式之前，需要比较了解面向对象思想）只负责一个特定的任务；&#xA;单例类：&#xA;1、构造函数需要标记为private（访问控制：防止外部代码使用new操作符创建对象），单例类不能在其他类中实例化，只能被其自身实例化；&#xA;2、拥有一个保存类的实例的静态成员变量&#xA;3、拥有一个访问这个实例的公共的静态方法（常用getInstance()方法进行实例化单例类，通过instanceof操作符可以检测到类是否已经被实例化）&#xA;另外，需要创建__clone()方法防止对象被复制（克隆）&#xA;为什么要使用PHP单例模式？&#xA;1、php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 使用单例模式, 则可以避免大量的new 操作消耗的资源。&#xA;2、如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现. 这个可以参看ZF的FrontController部分。&#xA;3、在一次页面请求中, 便于进行调试, 因为所有的代码(例如数据库操作类db)都集中在一个类中, 我们可以在类中设置钩子, 输出日志，从而避免到处var_dump, echo。&#xA;代码实现：&#xA;&amp;lt;?php /* * 设计模式之单例模式 * $_instance必须声明为静态的私有变量 * 构造函数和析构函数必须声明为私有,防止外部程序new * 类从而失去单例模式的意义 * getInstance()方法必须设置为公有的,必须调用此方法 * 以返回实例的一个引用 * ::操作符只能访问静态变量和静态函数 * new对象都会消耗内存 * 使用场景:最常用的地方是数据库连接。 * 使用单例模式生成一个对象后， * 该对象可以被其它众多对象所使用。 */ class Danli { //保存类实例的静态成员变量 private static $_instance; //private标记的构造方法 private function __construct(){ echo &#39;This is a Constructed method;&#39;; } //创建__clone方法防止对象被复制克隆 public function __clone(){ trigger_error(&#39;Clone is not allow!</description>
    </item>
    <item>
      <title>PHPExcel类库的各种使用方法总结</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-09-21-phpexcel/</link>
      <pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2015-09-21-phpexcel/</guid>
      <description>导入PHPExcel类库&#xA;include &#39;PHPExcel.php&#39;; include &#39;PHPExcel/Writer/Excel2007.php&#39;; //或者include &#39;PHPExcel/Writer/Excel5.php&#39;; 用于输出.xls的 创建一个excel&#xA;$objPHPExcel = new PHPExcel(); 保存excel—2007格式&#xA;$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); //或者$objWriter = new PHPExcel_Writer_Excel5($objPHPExcel); 非2007格式 $objWriter-&amp;gt;save(&amp;quot;xxx.xlsx&amp;quot;); 直接输出到浏览器&#xA;$objWriter = new PHPExcel_Writer_Excel5($objPHPExcel); header(&amp;quot;Pragma: public&amp;quot;); header(&amp;quot;Expires: 0″); header(&amp;quot;Cache-Control:must-revalidate, post-check=0, pre-check=0″); header(&amp;quot;Content-Type:application/force-download&amp;quot;); header(&amp;quot;Content-Type:application/vnd.ms-execl&amp;quot;); header(&amp;quot;Content-Type:application/octet-stream&amp;quot;); header(&amp;quot;Content-Type:application/download&amp;quot;);; header(&#39;Content-Disposition:attachment;filename=&amp;quot;resume.xls&amp;quot;&#39;); header(&amp;quot;Content-Transfer-Encoding:binary&amp;quot;); $objWriter-&amp;gt;save(&#39;php://output&#39;); ——————————————————————————————————————–&#xA;设置excel的属性：&#xA;//创建人 $objPHPExcel-&amp;gt;getProperties()-&amp;gt;setCreator(&amp;quot;Maarten Balliauw&amp;quot;); //最后修改人 $objPHPExcel-&amp;gt;getProperties()-&amp;gt;setLastModifiedBy(&amp;quot;Maarten Balliauw&amp;quot;); //标题 $objPHPExcel-&amp;gt;getProperties()-&amp;gt;setTitle(&amp;quot;Office 2007 XLSX Test Document&amp;quot;); //题目 $objPHPExcel-&amp;gt;getProperties()-&amp;gt;setSubject(&amp;quot;Office 2007 XLSX Test Document&amp;quot;); //描述 $objPHPExcel-&amp;gt;getProperties()-&amp;gt;setDescription(&amp;quot;Test document for Office 2007 XLSX, generated using PHP classes.</description>
    </item>
    <item>
      <title>【laravel学习笔记】一、安装</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/laravel/2015-09-01-laravel-build/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/laravel/2015-09-01-laravel-build/</guid>
      <description>Windows下安装 一、安装前的准备工作 1. PHP环境配置 2. 安装Composer 二、安装laravel 三、配置本地虚拟域名 参考这里：</description>
    </item>
    <item>
      <title>【laravel学习笔记】二、路由、控制器及视图简介</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/laravel/2015-09-11-laravel-route-controller-view/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/laravel/2015-09-11-laravel-route-controller-view/</guid>
      <description>##路由 Laravel应用的 大多数路由都将在 app/Http/routes.php 中定义，大多数基本的 Laravel 路由都只接受一个 URI 和 一个 闭包(Closure) 参数。下面是一个简单的GET路由：&#xA;Route::get(&#39;/&#39;, &#39;WelcomeController@index&#39;); Route : 声明一个路由 get : 定义一个GET路由，除get外，还有post、put、delete路由; / : URL路径 WelcomeController@index : 控制器@方法 该路由是用户访问根目录 / 时，执行控制器WelcomeController中的index方法。&#xA;##控制器 上面路由调用控制器 app/Http/Controllers/WelcomeController.php中的index()方法：&#xA;&amp;lt;?php namespace App\Http\Controllers; class WelcomeController extends Controller { public function index(){ return view(&#39;welcome&#39;); } } </description>
    </item>
    <item>
      <title>php知识笔记</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2014-01-01-php/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/php/2014-01-01-php/</guid>
      <description>##写入文件&#xA;$fp = fopen($_SERVER[&#39;DOCUMENT_ROOT&#39;].&amp;quot;/xxx.txt&amp;quot;,&amp;quot;a+&amp;quot;); fwrite($fp,date(&amp;quot;Y-m-d H:i:s&amp;quot;,time()).&amp;quot;\r\n&amp;quot;); fclose($fp); ##查找文件下所有文件名&#xA;$str = &#39;&#39;; $dir = &amp;quot;../Tpl/&amp;quot;; $preg2 = &#39;/[A-Za-z]/&#39;; if (is_dir ( $dir )) { if ($dh = opendir ( $dir )) { while ( ($file = readdir ( $dh )) !== false ) { if (preg_match ( $preg2, $file )) { $zt = &#39;&#39;; if ($info [&#39;theme&#39;] == $file) { $zt = &#39;selected&#39;; } $str .= &#39;&amp;lt;option value=&#39; . $file . &#39; &#39; .</description>
    </item>
    <item>
      <title>ThinkPHP笔记</title>
      <link>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/thinkphp/2014-01-01-thinkphp/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://gongvirgil.github.io/Blog/post/%E6%8A%80%E6%9C%AF/thinkphp/2014-01-01-thinkphp/</guid>
      <description>简介 ThinkPHP 是一个免费开源的，快速、简单的面向对象的 轻量级PHP开发框架 ，创立于2006年初，遵循Apache2开源协议发布，是为了敏捷WEB应用开发和简化企业应用开发而诞生的。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多的原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进，已经成长为国内最领先和最具影响力的WEB应用开发框架，众多的典型案例确保可以稳定用于商业以及门户级的开发。&#xA;全面的WEB开发特性支持 最新的ThinkPHP为WEB应用开发提供了强有力的支持，这些支持包括：&#xA;MVC支持-基于多层模型（M）、视图（V）、控制器（C）的设计模式 ORM支持-提供了全功能和高性能的ORM支持，支持大部分数据库 模板引擎支持-内置了高性能的基于标签库和XML标签的编译型模板引擎 RESTFul支持-REST模式提供了RESTFul支持，为你打造全新的URL设计和访问体验 云引擎支持-提供了对新浪SAE平台和百度BAE平台的强力支持，具备“横跨性”和“平滑性”，支持本地化开发和调试以及部署切换，让你轻松过渡，打造全新的开发体验。 CLI支持-支持基于命令行的应用开发 AMF支持-支持Flex开发和Flash通讯，打造互联网富应用 PHPRPC支持-提供基于PHPRpc的WEBService解决方案 MongoDb支持-提供NoSQL的支持 缓存支持-提供了包括文件、数据库、Memcache、Xcache、Redis等多种类型的缓存支持 大道至简的开发理念 ThinkPHP从诞生以来一直秉承大道至简的开发理念，无论从底层实现还是应用开发，我们都倡导用最少的代码完成相同的功能，正是由于对简单的执着和代码的修炼，让我们长期保持出色的性能和极速的开发体验。在主流PHP开发框架的评测数据中表现卓越，简单和快速开发是我们不变的宗旨。&#xA;安全性 框架在系统层面提供了众多的安全特性，确保你的网站和产品安全无忧。这些特性包括：&#xA;XSS安全防护 表单自动验证 强制数据类型转换 输入数据过滤 表单令牌验证 防SQL注入 图像上传检测 商业友好的开源协议 ThinkPHP遵循Apache2开源协议发布。Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再作为开源或商业软件发布。</description>
    </item>
  </channel>
</rss>
