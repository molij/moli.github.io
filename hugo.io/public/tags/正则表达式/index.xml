<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则表达式 on 莫离君的博客</title>
    <link>https://moli.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>Recent content in 正则表达式 on 莫离君的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 23 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://moli.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>正则表达式基础语法</title>
      <link>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/2015-12-23-preg-start/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/2015-12-23-preg-start/</guid>
      <description>##正则表达式是什么？&#xA;正则表达式只是一个字符串。没有长度限制，但是，这样的正则表达式长度往往较短。如下所示是一些正则表达式的例子：&#xA;I had a \S+ day today [A-Za-z0-9-_]{3,16} \d\d\d\d-\d\d-\d\d v(\d+)(.\d+)* TotalMessages=&amp;quot;(.*?)&amp;quot; &amp;lt;[^&amp;lt;&amp;gt;]&amp;gt; 这些字符串实际上都是微型计算机程序。正则表达式的语法，实际上是一种轻量级、简洁、适用于特定领域的编程语言。记住这一点，那么你就很容易理解下面的事情：&#xA;每一个正则表达式，都可以分解为一个指令序列，比如先找到这样的字符，再找到那样的字符，再从中找到一个字符。。。 每一个正则表达式都有输入（文本）和输出（匹配规则的输出，有时是修改后的文本） 正则表达式有可能出现语法错误——不是所有的字符串都是正则表达式 正则表达式语法很有个性，也可以说很恐怖 有时可以通过编译，使得正则表达式执行更快 正则表达式在文本编辑器中广泛使用，例如：&#xA;检查文本中是否含有指定的特征词 找出文中匹配特征词的位置 从文本中提取信息，比如：字符串的子串 修改文本 与文本编辑器相似，几乎所有的高级编程语言都支持正则表达式。在这样的语境下，文本也就是一个字符串，可以执行的操作都是类似的。一些编程语言（比如Perl，JavaScript）会检查正则表达式的语法。&#xA;特别提示：正则表达式与文件通配语法无关，比如 *.xml&#xA;##正则表达式的基础语法&#xA;###字符&#xA;普通字符只能匹配它们本身。但有一些被称为元字符的特殊字符，可以匹配一些特殊规则。如下所示的例子中已标出了元字符。&#xA;I had a \S+ day today [A-Za-z0-9\-_]{3,16} \d\d\d\d-\d\d-\d\d v(\d+)(\.\d+)* TotalMessages=&amp;quot;(.*?)&amp;quot; &amp;lt;[^&amp;lt;&amp;gt;]&amp;gt; 大部分的字符，包括所有的字母和数字字符，是普通字符。也就意味着，它们只能匹配它们自己，如下所示的正则表达式：&#xA;####cat&#xA;意味着，只能匹配一个字符串，以c开头，然后是字符a，紧跟着是字符t的字符串。&#xA;到目前为止，正则表达式的功能类似于&#xA;常规的Find功能 Java中的 String.indexOf() 函数 PHP中的 strpos()函数 等等 注意：不做特殊说明，正则表达式中是区分大小写的。但是，几乎所有正则表达式的实现，都会提供一个Flag用来控制是否区分大小写。&#xA;###点.&#xA;我们第一个要讲解的元字符是.。这个符号意味着可以匹配任意一个字符。如下所示的正则表达式：&#xA;####c.t&#xA;意味着匹配以c开头,之后是任意一个字符，紧跟着是字母t的字符串。&#xA;在一段文本中，这样的正则表达式可以用来找出cat, cot, czt这样的字符串，甚至可以找出c.t这样的组合，但是不能找到ct或者是coot这样的字符串。&#xA;使用反斜杠\可以忽略元字符，使得元字符的功能与普通字符一样。所以，正则表达式&#xA;####c\.t&#xA;表示找到字母c,然后是一个句号（.），紧跟着字母t&#xA;反斜杠本身也是一个元字符，这意味着反斜杠本身也可以通过相似的方法变回到普通字符的用途。因此，正则表达式&#xA;####c\\t&#xA;表示匹配以字符c开头,然后是一个反斜杠，紧跟着是字母t的字符串。&#xA;注意！在正则表达式的实现中，.是不能用于匹配换行符的。换行符的表示方法在不同实现中也不同。实际编程时，请参考相关文档。在本文中，我认为.是可以匹配任意字符的。实现环境通常会提供一个Flag标志位，来控制这一点。&#xA;###字符类&#xA;字符类是一组在方括号内的字符，表示可以匹配其中的任何一个字符。&#xA;正则表达式c[aeiou]t，表示可以匹配的字符串是以c开头，接着是aeiou中的任何一个字符，最后以t结尾。在文本的实际应用中，这样的正则表达式可以匹配：cat,cet,cit,cot,cut五种字符串。 正则表达式[0123456789]表示匹配任意一个整数。 正则表达式[a]表示匹配单字符a。 包含忽略字符的例子</description>
    </item>
  </channel>
</rss>
