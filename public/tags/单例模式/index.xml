<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>单例模式 on 莫离君的博客</title>
    <link>https://moli.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 单例模式 on 莫离君的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 09 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://moli.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP设计模式之单例模式</title>
      <link>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/php/2015-10-09-php-singleton-pattern/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/php/2015-10-09-php-singleton-pattern/</guid>
      <description>单例模式（职责模式）：&#xA;简单的说，一个对象（在学习设计模式之前，需要比较了解面向对象思想）只负责一个特定的任务；&#xA;单例类：&#xA;1、构造函数需要标记为private（访问控制：防止外部代码使用new操作符创建对象），单例类不能在其他类中实例化，只能被其自身实例化；&#xA;2、拥有一个保存类的实例的静态成员变量&#xA;3、拥有一个访问这个实例的公共的静态方法（常用getInstance()方法进行实例化单例类，通过instanceof操作符可以检测到类是否已经被实例化）&#xA;另外，需要创建__clone()方法防止对象被复制（克隆）&#xA;为什么要使用PHP单例模式？&#xA;1、php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 使用单例模式, 则可以避免大量的new 操作消耗的资源。&#xA;2、如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现. 这个可以参看ZF的FrontController部分。&#xA;3、在一次页面请求中, 便于进行调试, 因为所有的代码(例如数据库操作类db)都集中在一个类中, 我们可以在类中设置钩子, 输出日志，从而避免到处var_dump, echo。&#xA;代码实现：&#xA;&amp;lt;?php /* * 设计模式之单例模式 * $_instance必须声明为静态的私有变量 * 构造函数和析构函数必须声明为私有,防止外部程序new * 类从而失去单例模式的意义 * getInstance()方法必须设置为公有的,必须调用此方法 * 以返回实例的一个引用 * ::操作符只能访问静态变量和静态函数 * new对象都会消耗内存 * 使用场景:最常用的地方是数据库连接。 * 使用单例模式生成一个对象后， * 该对象可以被其它众多对象所使用。 */ class Danli { //保存类实例的静态成员变量 private static $_instance; //private标记的构造方法 private function __construct(){ echo &#39;This is a Constructed method;&#39;; } //创建__clone方法防止对象被复制克隆 public function __clone(){ trigger_error(&#39;Clone is not allow!</description>
    </item>
  </channel>
</rss>
