<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memcache on 莫离君的博客</title>
    <link>https://moli.github.io/tags/memcache/</link>
    <description>Recent content in Memcache on 莫离君的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 16 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://moli.github.io/tags/memcache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memcache整理</title>
      <link>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/2016-03-16-memcache/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/2016-03-16-memcache/</guid>
      <description>memcached是一个免费开源的，高性能的，具有分布式对象的缓存系统，它可以用来保存一些经常存取的对象或数据，保存的数据像一张巨大的HASH表，该表以Key-value对的方式存在内存中。&#xA;Memcached流程： 检查客户端的请求数据是否在memcached中，如有，直接把请求数据返回，不再对数据库进行任何操作。 如果请求的数据不在memcached中，就去查数据库，把从数据库中获取的数据返回给客户端，同时把数据缓存一份到memcached中（memcached客户端不负责，需要程序明确实现）。 每次更新数据库的同时更新memcached中的数据，保证一致性。 当分配给memcached内存空间用完之后，会使用LRU（Least Recently Used，最近最少使用）策略加上到期失效策略，失效数据首先被替换，然后再替换掉最近未使用的数据。 Memcached特征： 协议简单 它是基于文本行的协议，直接通过telnet在memcached服务器上可进行存取数据操作&#xA;基于libevent事件处理 Libevent是一套利用C开发的程序库，它将BSD系统的kqueue,Linux系统的epoll等事件处理功能封装成一个接口，与传统的select相比，提高了性能。&#xA;内置的内存管理方式 所有数据都保存在内存中，存取数据比硬盘快，当内存满后，通过LRU算法自动删除不使用的缓存，但没有考虑数据的容灾问题，重启服务，所有数据会丢失。&#xA;分布式 各个memcached服务器之间互不通信，各自独立存取数据，不共享任何信息。服务器并不具有分布式功能，分布式部署取决于memcache客户端。&#xA;Memcached的缓存策略： memcached的缓存策略是LRU（最近最少使用）加上到期失效策略。当你在memcached内存储数据项时，你有可能会指定它在缓存的失效时间，默认为永久。当memcached服务器用完分配的内时，失效的数据被首先替换，然后也是最近未使用的数据。在LRU中，memcached使用的是一种Lazy Expiration策略，自己不会监控存入的key/vlue对是否过期，而是在获取key值时查看记录的时间戳，检查key/value对空间是否过期，这样可减轻服务器的负载。&#xA;Memcached的分布式算法： 当向memcached集群存入/取key/value时，memcached客户端程序根据一定的算法计算存入哪台服务器，然后再把key/value值存到此服务器中。 选择服务器算法有两种，一种是根据余数来计算分布，另一种是根据散列算法来计算分布。&#xA;余数算法： 先求得键的整数散列值，再除以服务器台数，根据余数确定存取服务器，这种方法计算简单，高效，但在memcached服务器增加或减少时，几乎所有的缓存都会失效。&#xA;散列算法： 先算出memcached服务器的散列值，并将其分布到0到2的32次方的圆上，然后用同样的方法算出存储数据的键的散列值并映射至圆上，最后从数据映射到的位置开始顺时针查找，将数据保存到查找到的第一个服务器上，如果超过2的32次方，依然找不到服务器，就将数据保存到第一台memcached服务器上。如果添加了一台memcached服务器，只在圆上增加服务器的逆时针方向的第一台服务器上的键会受到影响。</description>
    </item>
    <item>
      <title>Memcache基本教程</title>
      <link>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/php/2015-12-02-memcache/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://moli.github.io/post/%E6%8A%80%E6%9C%AF/php/2015-12-02-memcache/</guid>
      <description>Memcache是danga.com的一个项目，最早是为 LiveJournal 服务的，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力。 它可以应对任意多个连接，使用非阻塞的网络IO。由于它的工作机制是在内存中开辟一块空间，然后建立一个HashTable，Memcached自管理这些HashTable。 Memcache官方网站：http://www.danga.com/memcached，更多详细的信息可以来这里了解 :)&#xA;###为什么会有Memcache和memcached两种名称？ 其实Memcache是这个项目的名称，而memcached是它服务器端的主程序文件名，知道我的意思了把~~~~。一个是项目名称，一个是主程序文件名，在网上看到了很多人不明白，于是混用了。&#xA;##Memcache的安装 分为两个过程：memcache服务器端的安装和memcached客户端的安装。 所谓服务器端的安装就是在服务器（一般都是linux系统）上安装Memcache实现数据的存储 所谓客户端的安装就是指php（或者其他程序，Memcache还有其他不错的api接口提供）去使用服务器端的Memcache提供的函数，需要php添加扩展。&#xA;###具体的配置大家可以参考： Linux下的Memcache安装：http://www.ccvita.com/257.html Windows下的Memcache安装：http://www.ccvita.com/258.html Memcache基础教程：http://www.ccvita.com/259.html Discuz!的Memcache缓存实现：http://www.ccvita.com/261.html Memcache协议中文版：http://www.ccvita.com/306.html Memcache分布式部署方案：http://www.ccvita.com/395.html&#xA;##PHP的Memcache&#xA;&amp;lt; ?php //连接 $mem = new Memcache; $mem-&amp;gt;connect(&amp;quot;192.168.0.200&amp;quot;, 12000); //保存数据 $mem-&amp;gt;set(&#39;key1&#39;, &#39;This is first value&#39;, 0, 60); $val = $mem-&amp;gt;get(&#39;key1&#39;); echo &amp;quot;Get key1 value: &amp;quot; . $val .&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //替换数据 $mem-&amp;gt;replace(&#39;key1&#39;, &#39;This is replace value&#39;, 0, 60); $val = $mem-&amp;gt;get(&#39;key1&#39;); echo &amp;quot;Get key1 value: &amp;quot; . $val . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //保存数组 $arr = array(&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;, &#39;ddd&#39;); $mem-&amp;gt;set(&#39;key2&#39;, $arr, 0, 60); $val2 = $mem-&amp;gt;get(&#39;key2&#39;); echo &amp;quot;Get key2 value: &amp;quot;; print_r($val2); echo &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //删除数据 $mem-&amp;gt;delete(&#39;key1&#39;); $val = $mem-&amp;gt;get(&#39;key1&#39;); echo &amp;quot;Get key1 value: &amp;quot; .</description>
    </item>
  </channel>
</rss>
